{"version":3,"file":"static/js/162.8ab0d8ac.chunk.js","mappings":"mJACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAA4I,0BCA5I,EAA0B,yB,aCG1B,MAOA,EAPiBA,IAETC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEJ,EAAMK,UCL1C,EAAyB,2BAAzB,EAA6D,2B,cCI7D,MAUA,EAVoBL,IAChB,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACIN,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAW,IAAMA,EAASC,UACtCH,EAAAA,EAAAA,KAACO,EAAAA,GAAO,CAACC,GAAIH,EAAKF,SAAEJ,EAAMU,QACxB,E,sDCId,MA8BMC,GAAcC,EAAAA,EAAAA,GAAiB,IAiB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAClCC,KAAM,wBADkBD,EAfJd,IAIhBgB,EAAAA,EAAAA,MAAA,QAAMC,SAAUjB,EAAMkB,aAAad,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,SAAU,CAACC,EAAAA,EAAUV,GAAcD,KAAM,iBAAkBY,UAAWC,EAAAA,GAAUC,YAAa,WAExGvB,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,wBAUxB,EAnDiBJ,IACb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAKC,IAAK7B,EAAAA,EAAAA,KAAC8B,EAAU,CAACrB,KAAMoB,EAAEpB,KAAMH,GAAIuB,EAAEvB,OAC1EyB,EAAkBP,EAAMQ,SAASJ,KAAKK,IAAKjC,EAAAA,EAAAA,KAACkC,EAAO,CAAC9B,QAAS6B,EAAE7B,YAGnE,IAAKL,EAAMoC,OACP,OACInC,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAAC5B,GAAI,WAQtB,OACIO,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,SAC1BuB,KAELX,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAWC,SAAA,EACvBH,EAAAA,EAAAA,KAAA,OAAAG,SAAM4B,KACN/B,EAAAA,EAAAA,KAACY,EAAmB,CAACI,SAXZqB,IACjBtC,EAAMuC,YAAYD,EAAOE,eAAe,SAYlC,E,wBChBd,SAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBmBjB,IACZ,CACHC,YAAaD,EAAMC,gBAIDiB,IACf,CACHJ,YAAcC,IACVG,GAASC,EAAAA,EAAAA,GAAmBJ,GAAgB,MASpDK,EAAAA,EAFJ,CAGEC,E,6ECvBF,IAAIC,EAA8BtB,IAAK,CACnCW,OAAQX,EAAMuB,KAAKZ,SAGhB,MAAMS,EAAoBI,IAC7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAKC,KAAKrD,MAAMoC,QAITnC,EAAAA,EAAAA,KAACgD,EAAS,IAAKI,KAAKrD,SAHhBC,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAAC5B,GAAI,UAI7B,EAKJ,OAFqCiC,EAAAA,EAAAA,IAAQK,EAARL,CAAoCQ,EAEpC,C","sources":["webpack://react1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","webpack://react1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ifsIf\",\"dialogsItems\":\"Dialogs_dialogsItems__7Vny9\",\"active\":\"Dialogs_active__7gtgC\",\"messages\":\"Dialogs_messages__JXOmq\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__hJVq1\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__VWTVC\",\"active\":\"DialogItem_active__21QlL\"};","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messageElements = state.messages.map( m => <Message message={m.message}/>);\r\n\r\n\r\n    if (!props.isAuth) {\r\n        return (\r\n            <Navigate to={\"/login\"}/>\r\n        )\r\n    }\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate={[required, maxLength50]} name={'newMessageBody'} component={Textarea} placeholder={'xyu'}></Field>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs);","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["props","_jsx","className","s","children","message","path","id","NavLink","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","validate","required","component","Textarea","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messageElements","messages","m","Message","isAuth","Navigate","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Component","RedirectComponent","React","render","this"],"sourceRoot":""}